// Function that returns a promise which will succeed after 500ms
const resolvedPromise = () => {
  return new Promise((resolve, reject) => {

    // Wait for 500ms and then resolve the promise with a success message
    setTimeout(() => {
      resolve({ message: 'delayed success!' });
    }, 500);
  });
};

// Function that returns a promise which will fail after 500ms
const rejectedPromise = () => {
  return new Promise((resolve, reject) => {

    // Wait for 500ms and then reject the promise with an error message
    setTimeout(() => {
      reject(new Error('error: delayed exception!'));
    }, 500);
  });
};

// Call the function that succeeds and handle the result
resolvedPromise()
  .then(success => console.log(success))  // If resolved, log the success message
  .catch(error => console.error(error));  // If there’s an error (unlikely here), log the error

// Call the function that fails and handle the error
rejectedPromise()
  .then(success => console.log(success))  // If resolved (won’t happen here), log the success message
  .catch(error => console.error(error));  // If rejected, log the error message
